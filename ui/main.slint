import { Button, VerticalBox, HorizontalBox } from "std-widgets.slint";
import { GraphView, NodeData, NetData } from "graph.slint";
import { ToolboxView, NodeTypeData } from "toolbox.slint";

export component MainWindow inherits Window {
    title: "LogicSim";
    minimum-width: 800px;
    minimum-height: 600px;
    
    // Expose graph data properties with default values
    in property <[NodeData]> nodes: [];
    in property <[NetData]> nets: [];
    in property <[string]> selected-nodes: [];
    in property <[string]> selected-nets: [];
    in property <string> editing-node-id: "";
    in property <string> editing-text: "";
    in property <bool> creating-net: false;
    in property <length> pending-start-x;
    in property <length> pending-start-y;
    in property <length> pending-end-x;
    in property <length> pending-end-y;
    in property <[NodeTypeData]> toolbox-items: [];
    in property <bool> toolbox-creation-mode: false;
    in property <bool> simulation-mode: false;
    
    // Callback for handling graph pointer events
    callback graph-pointer-event(string, float, float);
    callback label-edit-completed(string, string);
    callback label-edit-changed(string);
    callback delete-clicked();
    callback toolbox-node-type-clicked(string);
    callback enter-simulation-clicked();
    callback enter-edit-clicked();
    
    
    VerticalBox {
        spacing: 10px;
        padding: 10px;
        alignment: stretch;
        
        // Title section
        HorizontalBox {
            alignment: center;
            height: 50px;
            
            Text {
                text: "LogicSim - Logic Circuit Simulator";
                font-size: 18px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
        
        // Main content area - toolbox and graph view
        HorizontalBox {
            spacing: 10px;
            alignment: stretch;
            
            // Left toolbox panel
            ToolboxView {
                toolbox-width: 160px;
                node-types: root.toolbox-items;
                
                node-type-clicked(node_type) => {
                    root.toolbox-node-type-clicked(node_type);
                }
            }
            
            // Main graph view (reduced width to accommodate toolbox)
            GraphView {
                nodes: root.nodes;
                nets: root.nets;
                selected-nodes: root.selected-nodes;
                selected-nets: root.selected-nets;
                editing-node-id: root.editing-node-id;
                editing-text: root.editing-text;
                creating-net: root.creating-net;
                pending-start-x: root.pending-start-x;
                pending-start-y: root.pending-start-y;
                pending-end-x: root.pending-end-x;
                pending-end-y: root.pending-end-y;
                
                pointer-event(kind, x, y) => {
                    root.graph-pointer-event(kind, x, y);
                }
                label-edit-completed(node_id, new_label) => {
                    root.label-edit-completed(node_id, new_label);
                }
                label-edit-changed(text) => {
                    root.label-edit-changed(text);
                }
            }
        }
        
        // Control buttons
        HorizontalBox {
            alignment: center;
            spacing: 10px;
            height: 40px;
            
            Button {
                text: root.simulation-mode ? "Enter Edit" : "Enter Simulation";
                width: 120px;
                enabled: true;
                clicked => {
                    if (root.simulation-mode) {
                        root.enter-edit-clicked();
                    } else {
                        root.enter-simulation-clicked();
                    }
                }
            }
            
            Button {
                text: "Delete";
                width: 80px;
                enabled: !root.simulation-mode;
                clicked => {
                    root.delete-clicked();
                }
            }
            
            Button {
                text: "Exit";
                width: 80px;
            }
        }
    }
}