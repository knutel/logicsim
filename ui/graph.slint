// Graph visualization component for LogicSim

// Individual connector component (black dot)
export component Connector {
    in property <length> size: 8px;
    in property <color> color: #000000;
    
    width: size;
    height: size;
    
    Rectangle {
        width: parent.width;
        height: parent.height;
        background: color;
        border-radius: size / 2;
    }
}


// Connection line component using Path
export component ConnectionLine {
    in property <length> start-x;
    in property <length> start-y;
    in property <length> end-x;
    in property <length> end-y;
    in property <color> line-color: #000000;
    in property <length> line-width: 2px;
    
    // Position the path to cover the line area
    x: min(start-x, end-x);
    y: min(start-y, end-y);
    width: abs(end-x - start-x) + 1px;
    height: abs(end-y - start-y) + 1px;
    
    Path {
        x: 0;
        y: 0;
        width: parent.width;
        height: parent.height;
        fill: transparent;
        stroke: line-color;
        stroke-width: line-width;
        
        MoveTo {
            x: (start-x - parent.x) / 1px;
            y: (start-y - parent.y) / 1px;
        }
        LineTo {
            x: (end-x - parent.x) / 1px;
            y: (end-y - parent.y) / 1px;
        }
    }
}

// Connector data structure
export struct ConnectorData {
    id: string,
    x: length,
    y: length,
    is_input: bool,
}

// Node data structure
export struct NodeData {
    id: string,
    node_type: string,
    x: length,
    y: length,
    width: length,
    height: length,
    label: string,
    connectors: [ConnectorData],
}

// Connection data structure
export struct ConnectionData {
    id: string,
    start_x: length,
    start_y: length,
    end_x: length,
    end_y: length,
}

// Main graph view component
export component GraphView {
    in property <length> graph-width: 600px;
    in property <length> graph-height: 400px;
    in property <[NodeData]> nodes: [];
    in property <[ConnectionData]> connections: [];
    
    width: graph-width;
    height: graph-height;
    
    
    // Background
    Rectangle {
        width: parent.width;
        height: parent.height;
        background: #f5f5f5;
        border-color: #cccccc;
        border-width: 1px;
    }
    
    // Dynamic nodes rendering
    for node in nodes: Rectangle {
        x: node.x;
        y: node.y;
        width: node.width;
        height: node.height;
        
        if node.node_type == "input" || node.node_type == "output": Rectangle {
            width: parent.width;
            height: parent.height;
            background:rgb(117, 231, 71);
            border-color: #404040;
            border-width: 2px;
            border-radius: parent.width / 2;
            
            Text {
                text: node.label;
                color: #000000;
                font-size: 12px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
        
        if node.node_type == "and" || node.node_type == "or" || node.node_type == "not": Rectangle {
            width: parent.width;
            height: parent.height;
            background: #e0e0e0;
            border-color: #404040;
            border-width: 2px;
            
            Text {
                text: node.node_type == "and" ? "AND" : (node.node_type == "or" ? "OR" : "NOT");
                color: #000000;
                font-size: 14px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
        
        // Dynamic connectors rendering using data from Python
        for connector in node.connectors: Connector {
            x: connector.x - node.x;
            y: connector.y - node.y;
        }
    }
    
    // Dynamic connections rendering
    for connection in connections: ConnectionLine {
        start-x: connection.start_x;
        start-y: connection.start_y;
        end-x: connection.end_x;
        end-y: connection.end_y;
    }
}