// Graph visualization component for LogicSim
import { VerticalBox, LineEdit, ScrollView } from "std-widgets.slint";

// Individual connector component (black dot)
export component Connector {
    in property <length> size: 8px;
    in property <color> color: #000000;
    
    width: size;
    height: size;
    
    Rectangle {
        width: parent.width;
        height: parent.height;
        background: color;
        border-radius: size / 2;
    }
}


// Net line component using Path with multiple segments
export component NetLine {
    in property <[{start_x: length, start_y: length, end_x: length, end_y: length}]> segments;
    in property <bool> is-selected: false;
    in property <bool> value: false;
    in property <bool> has-value: false;
    in property <bool> simulation-mode: false;
    
    // Color logic: selection takes priority, then simulation mode value colors
    in property <color> line-color: is-selected ? #0066cc :                    // Blue for selected
                                   simulation-mode && has-value && value ? rgb(0, 200, 0) :      // Green for true
                                   simulation-mode && has-value && !value ? rgb(200, 0, 0) :     // Red for false
                                   simulation-mode && !has-value ? #888888 :                     // Gray for no value
                                   #000000;                                                       // Black for edit mode
    
    // Width logic: thicker in simulation mode for better visibility
    in property <length> line-width: is-selected ? 5px :                      // Thickest for selected
                                    simulation-mode ? 4px :                    // Thick for simulation
                                    2px;                                       // Normal for edit mode
    
    x: 0;
    y: 0;
    width: 100%;
    height: 100%;
    
    // Render each segment as a separate Path element
    for segment in segments: Path {
        x: parent.x;
        y: parent.y;
        width: parent.width;
        height: parent.height;
        viewbox-width: parent.width / 1px;
        viewbox-height: parent.height / 1px;
        fill: transparent;
        stroke: line-color;
        stroke-width: line-width;
        
        MoveTo {
            x: segment.start_x / 1px;
            y: segment.start_y / 1px;
        }
        LineTo {
            x: segment.end_x / 1px;
            y: segment.end_y / 1px;
        }
    }
}

// Pending net line component (gray dashed appearance)
export component PendingNetLine {
    in property <length> start-x;
    in property <length> start-y;
    in property <length> end-x;
    in property <length> end-y;
    in property <color> line-color: #888888;
    in property <length> line-width: 2px;
    
    x: 0;
    y: 0;
    width: 100%;
    height: 100%;
    
    // Draw solid line in gray to distinguish from regular nets
    Path {
        x: parent.x;
        y: parent.y;
        width: parent.width;
        height: parent.height;
        viewbox-width: parent.width / 1px;
        viewbox-height: parent.height / 1px;
        fill: transparent;
        stroke: line-color;
        stroke-width: line-width;
        
        MoveTo {
            x: start-x / 1px;
            y: start-y / 1px;
        }
        LineTo {
            x: end-x / 1px;
            y: end-y / 1px;
        }
    }
}

// Connector data structure
export struct ConnectorData {
    id: string,
    x: length,
    y: length,
    is_input: bool,
}

// Node data structure
export struct NodeData {
    id: string,
    node_type: string,
    x: length,
    y: length,
    width: length,
    height: length,
    label: string,
    color: string,
    connectors: [ConnectorData],
    value: bool,        // Simulation state value (true/false)
    has_value: bool,    // Whether the node has a simulation value set
}

// Net data structure
export struct NetData {
    id: string,
    segments: [{start_x: length, start_y: length, end_x: length, end_y: length}], // List of line segments that make up this net
    value: bool,           // Logical value carried by this net
    has_value: bool,       // Whether the net carries a valid value
    simulation_mode: bool, // Whether we're in simulation mode
}

// Main graph view component
export component GraphView {
    in property <[NodeData]> nodes: [];
    in property <[NetData]> nets: [];
    in property <[string]> selected-nodes: [];
    in property <[string]> selected-nets: [];
    in property <string> editing-node-id: "";
    in property <string> editing-text: "";
    in property <bool> creating-net: false;
    in property <length> pending-start-x;
    in property <length> pending-start-y;
    in property <length> pending-end-x;
    in property <length> pending-end-y;
    
    callback pointer-event(string, float, float);
    callback label-edit-completed(string, string);
    callback label-edit-changed(string);
    
    ScrollView {
        width: parent.width;
        height: parent.height;
        viewport-width: 5000px;
        viewport-height: 5000px;

        // Touch area for capturing mouse clicks
        TouchArea {
            width: parent.viewport-width;
            height: parent.viewport-height;
            
            pointer-event(event) => {
                if (event.kind == PointerEventKind.down) {
                    root.pointer-event("down", self.mouse-x / 1px, self.mouse-y / 1px);
                } else if (event.kind == PointerEventKind.up) {
                    root.pointer-event("up", self.mouse-x / 1px, self.mouse-y / 1px);
                } else if (event.kind == PointerEventKind.move) {
                    root.pointer-event("move", self.mouse-x / 1px, self.mouse-y / 1px);
                }
            }
        }
        
        // Background
        Rectangle {
            width: parent.viewport-width;
            height: parent.viewport-height;
            background: #f5f5f5;
            border-color: #cccccc;
            border-width: 1px;
            clip: true;
        
        
            // Dynamic nodes rendering - unified rectangle rendering for all node types
            for node in nodes: Rectangle {
                x: node.x;
                y: node.y;
                width: node.width;
                height: node.height;
                
                // Single rectangle rendering for all node types with state-based colors
                Rectangle {
                    width: parent.width;
                    height: parent.height;
                    // State-based colors take precedence over node type colors
                    background: node.has_value && node.value ? rgb(144, 255, 144) :      // Green for high/true
                               node.has_value && !node.value ? rgb(255, 144, 144) :      // Red for low/false  
                               node.node_type == "input" ? rgb(144, 238, 144) :          // Default input color (light green)
                               node.node_type == "output" ? rgb(255, 182, 193) :         // Default output color (light pink)
                               rgb(200, 200, 200);                                       // Gray for undefined/logic gates
                    border-color: selected-nodes.length > 0 && selected-nodes[0] == node.id ? #0066cc : #404040;
                    border-width: selected-nodes.length > 0 && selected-nodes[0] == node.id ? 4px : 2px;
                    
                    VerticalBox {
                        spacing: 2px;
                        padding: 2px;
                        
                        Text {
                            text: node.node_type;
                            color: #000000;
                            font-size: 10px;
                            font-weight: 600;
                            horizontal-alignment: center;
                        }
                        
                        if editing-node-id == node.id: LineEdit {
                            text: editing-text;
                            horizontal-alignment: center;
                            font-size: 12px;
                            
                            accepted(text) => {
                                root.label-edit-completed(node.id, text);
                            }
                            edited(text) => {
                                root.label-edit-changed(text);
                            }
                        }
                        if editing-node-id != node.id: Text {
                            text: node.label;
                            color: #000000;
                            font-size: 12px;
                            horizontal-alignment: center;
                        }
                    }
                }
                
                // Dynamic connectors rendering using data from Python
                for connector in node.connectors: Connector {
                    x: connector.x - node.x;
                    y: connector.y - node.y;
                }
            }
            
            // Dynamic nets rendering
            for net in nets: NetLine {
                segments: net.segments;
                is-selected: selected-nets.length > 0 && selected-nets[0] == net.id;
                value: net.value;
                has-value: net.has_value;
                simulation-mode: net.simulation_mode;
            }
            
            // Pending net rendering (dotted line)
            if creating-net: PendingNetLine {
                start-x: pending-start-x;
                start-y: pending-start-y;
                end-x: pending-end-x;
                end-y: pending-end-y;
            }
        }
    }
}